C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\main.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg932.h>
   2          #include "uart.h" //Needed for serial communications
   3          #include "main_music.h"
   4          
   5          
   6          
   7          // -----------------------------------------------------------------------------
   8          // Port and Pin Variable Definitions
   9          // -----------------------------------------------------------------------------
  10          
  11          // b<row><column> = <port-pin>
  12          // Refers to each button built-in to the simon board 
  13          // and its corresponding port pin based on location
  14          sbit bTopLeft    = P2^0;
  15          sbit bTopMid     = P0^1;
  16          sbit bTopRight   = P2^3;
  17          sbit bMidLeft    = P0^2;
  18          sbit bMidMid     = P1^4;
  19          sbit bMidRight   = P0^0;
  20          sbit bBotLeft    = P2^1;
  21          sbit bBotMid     = P0^3;
  22          sbit bBotRight   = P2^2;
  23          
  24          // l<row><column> = <port-pin>
  25          // Refers to each LED built-in to the simon board 
  26          // and its corresponding port pin based on location
  27          sbit lTopLeft    = P2^4;
  28          sbit lTopMid     = P0^5;
  29          sbit lTopRight   = P2^7;
  30          sbit lMidLeft    = P0^6;
  31          sbit lMidMid     = P1^6;
  32          sbit lMidRight   = P0^4;
  33          sbit lBotLeft    = P2^5;
  34          sbit lBotMid     = P0^7;
  35          sbit lBotRight   = P2^6;
  36          
  37          // p1_pulse and p2_pulse are used for sending
  38          // high pulses to Arduino UNO used for displaying
  39          // and counting scores. p1_pulse for Player 'X', 
  40          // p2_pulse for player 'O'
  41          sbit p1_pulse    = P1^2;
  42          sbit p2_pulse    = P1^3;
  43          // Refers to the piezo buzzer built-in to the simon
  44          // board and its corresponding port pin
  45          sbit SPKR        = P1^7;
  46          
  47          
  48          
  49          // -----------------------------------------------------------------------------
  50          // Constants
  51          // -----------------------------------------------------------------------------
  52          
  53          // these values are maximum wait values for 16-bit
  54          // timers, and are utilized in the LED flashing function
  55          // for display 'O' cells on the LED grid.
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 2   

  56          #define LED_FLASH_TIME_HIGH -65535 >> 8
  57          #define LED_FLASH_TIME_LOW  -65535
  58          
  59          // This message is sent over serial communication
  60          // upon initialization of the program to ensure serial
  61          // communication is working
  62          char welcome_msg[] = "HELLO!\n\0";
  63          
  64          // This null-terminating character array is used for
  65          // displaying the board. (it is the horizontal divider
  66          // for rows) and is used in printGameStatus
  67          char line[] = "-----";
  68          
  69          
  70          
  71          // -----------------------------------------------------------------------------
  72          // Regular-use Variable Definitions
  73          // -----------------------------------------------------------------------------
  74          
  75          // these iterators are variables that can be used for iteration
  76          // they must be reset each time they are used by programmer
  77          unsigned int iterator;
  78          unsigned char char_iterator;
  79          
  80          
  81          // length is used in the music playing subroutine and
  82          // is the upper limit of the total note length
  83          unsigned char length;
  84          
  85          
  86          unsigned char pulse_counter;
  87          
  88          
  89          //Characters representing each location's status
  90          // ' ' means Not taken
  91          // 'O' means taken by O
  92          // 'X' means taken by X
  93          
  94          /* 
  95            Given a tic-tac-toe board,
  96          
  97              0 | 1 | 2 
  98             -----------
  99              3 | 4 | 5
 100             -----------
 101              6 | 7 | 8
 102          
 103            the values in each cell correspond to its
 104            index in gameStatus. gameStatus has a '\0'
 105            at its end in the event a programmer wants
 106            to output gameStatus for debugging purposes.
 107          */
 108          char gameStatus[10];
 109          
 110          
 111          // boolean flag used in main program for determining
 112          // when the game has concluded
 113          bit gameEnd;
 114          
 115          
 116          // boolean to determine if introduction music is done
 117          bit introduction_flag;
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 3   

 118          
 119          
 120          // char for iterating through each character in a
 121          // null-terminating character array in SerialDisplay
 122          // subroutine
 123          char msg_i = 0;
 124          
 125          
 126          // char to store input from a specific polling sequence
 127          // returned from under the PollButtons function
 128          unsigned char input = 0x00;
 129          
 130          
 131          // char that cycles each game turn between 'X' and
 132          // 'O' representing the player whose piece will be
 133          // played next
 134          char current_player = 'X';
 135          
 136          // game_output is a null-terminating character array
 137          // that provides a nicely formatted row of tic-tac-toe
 138          // used in printGameStatus
 139          char game_output[] = " | | ";
 140          
 141          // row is used to iterate through each row of the board
 142          // in printGameStatus
 143          char row;
 144          
 145          // col is used to iterate through each column of each row
 146          // of the board in printGameStatus
 147          char col;
 148          
 149          // when AI_flag is 1, then a computer plays 'O's and
 150          // human plays 'X's. Otherwise, humans control both 'O's
 151          // and 'X's
 152          bit AI_flag = 0;
 153          
 154          // note_its counts the number of times the timer controlling
 155          // frequency oscillation for notes has been triggered. When it 
 156          // reaches FREQUENCY_DIVISOR, it resets to 0.
 157          unsigned char note_its;
 158          
 159          // duration counts the number of times the timer controlling
 160          // note duration has been triggered. When it reaches 'length',
 161          // it moves to the next note or quits music.
 162          unsigned char duration;
 163          
 164          // when using half-time mode, mod increases the amount of
 165          // time necessary for duration to be incremented
 166          char mod;
 167          
 168          // rest_played is a flag that indicates whether or not
 169          // the mandatory short pause between notes has been completed
 170          char rest_played;
 171          
 172          // note_num counts the number of notes that have been played
 173          // and is used to find frequency and duration of the current
 174          // note in arrays.
 175          unsigned char note_num = 0;
 176          
 177          // num_notes is the length of the notes/duration arrays storing
 178          // musical information
 179          unsigned char num_notes = 32;
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 4   

 180          
 181          
 182          // note_ptr points to the array containing the number n 
 183          // that corresponds to 111*n = number of machine cycles 
 184          // per oscillation for a given note
 185          char idata * note_ptr;
 186          
 187          // duration_ptr points to the array containing the 
 188          // number n that corresponds to (n / 32)th note 
 189          // when playing at a given tempo
 190          char idata * duration_ptr;
 191          
 192          // introduction_flag is 1 both enables the music functions
 193          // to be utilized and implies that they are being used
 194          // as introduction_flag is automatically set to 0 at the end
 195          // of use of music functions
 196          bit introduction_flag = 1;
 197          
 198          // nbc_flag is 1 enables the use of the NBC chimes for music
 199          // it is automatically set to 1 after the initial song is played
 200          // i.e. Maxine Nightingale's Gotta Get Right Back.
 201          bit nbc_flag = 0;
 202          
 203          
 204          
 205          // -----------------------------------------------------------------------------
 206          // Function Prototypes
 207          // -----------------------------------------------------------------------------
 208          
 209          // ------------------------------------
 210          // restart_timer1
 211          // Desc: Resets values for 16-bit timer in music mode
 212          // Post: Timer is turned on and has 
 213          // ------------------------------------
 214          void restart_timer1 ( );
 215          
 216          // ------------------------------------
 217          // restart_timer1
 218          // Desc:
 219          // Pre:
 220          // Post:
 221          // ------------------------------------
 222          void SerialDisplay(char *);
 223          
 224          // ------------------------------------
 225          // restart_timer1
 226          // Desc:
 227          // Pre:
 228          // Post:
 229          // ------------------------------------
 230          void StartGame();
 231          
 232          // ------------------------------------
 233          // restart_timer1
 234          // Desc:
 235          // Pre:
 236          // Post:
 237          // ------------------------------------
 238          char PollButtons();
 239          
 240          // ------------------------------------
 241          // restart_timer1
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 5   

 242          // Desc:
 243          // Pre:
 244          // Post:
 245          // ------------------------------------
 246          void play_sound_byte();
 247          
 248          // ------------------------------------
 249          // restart_timer1
 250          // Desc:
 251          // Pre:
 252          // Post:
 253          // ------------------------------------
 254          bit CheckWin();
 255          
 256          
 257          //Description: The display() outputs the current state of the game
 258          //to the serial port.
 259          //Pre:  gameStatus[] must be populated or cleared
 260          //Post: Current state of the game will be displayed.
 261          
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          //Loops through and checks each button
 274          //Returns (as a number) the location of the first
 275          //button pressed
 276          // 0 is returned if no button is pressed
 277          
 278          
 279          
 280          // -----------------------------------------------------------------------------
 281          // Interrupt Service Routines (ISRs)
 282          // -----------------------------------------------------------------------------
 283          
 284          
 285          // The Timer1 ISR is responsible for providing the duration
 286          // of the note being played
 287          
 288          void timer1_isr ( ) interrupt TIMER_1
 289          {
 290   1        // turn off the timer while working
 291   1        TR1 = 0;
 292   1      
 293   1        // if we have not yet reached the note's full duration
 294   1        length = DUR_8;
 295   1        if ( nbc_flag )
 296   1        {
 297   2          length = duration_ptr[note_num];
 298   2        }
 299   1        
 300   1        if ( duration != length )
 301   1        {    
 302   2          // if we are using half time
 303   2          if (HALF_TIME_BOOL)
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 6   

 304   2          {
 305   3            // every other trigger, we increment duration
 306   3            mod = (++mod) % 10;
 307   3            if ( mod != 9 )
 308   3            {
 309   4              duration++;
 310   4            }
 311   3          }
 312   2          // otherwise
 313   2          else
 314   2          {
 315   3            // always increment duration
 316   3            duration++;
 317   3          }
 318   2      
 319   2        restart_timer1();
 320   2        }
 321   1      
 322   1        // if we have reached the note's full duration
 323   1         else
 324   1        {
 325   2          // stop playing the current note
 326   2          TR0 = 0;
 327   2          TF0 = 0;
 328   2          note_its = 0;
 329   2          SPKR = 0;
 330   2      
 331   2          // make sure we have rested adequately
 332   2          if ( rest_played != 5 )
 333   2          {
 334   3            // acknowledge that this code has been executed
 335   3            rest_played++;
 336   3      
 337   3            // wait the smallest possible note length
 338   3            restart_timer1();
 339   3            return;
 340   3          }
 341   2      
 342   2          //no matter what
 343   2          
 344   2          // reset the duration
 345   2          duration = 0;
 346   2      
 347   2          // reset the mod, so we don't get left out if in half time
 348   2          mod = 1;
 349   2       
 350   2          // if we are at the last note, we light the LED
 351   2          if ( note_num == num_notes )
 352   2          {
 353   3            introduction_flag = 0;
 354   3            note_ptr = nbc_notes;
 355   3            duration_ptr = nbc_durations;
 356   3            num_notes = 3;
 357   3            note_num = 0;
 358   3          }
 359   2      
 360   2          // otherwise, if there are still notes in the song
 361   2          else
 362   2          {
 363   3            // move on to the next note
 364   3            note_num++;
 365   3      
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 7   

 366   3            // if the note is stored as 0, do not worry about oscillating
 367   3            // b/c it is a rest!
 368   3            if ( note_ptr[note_num] == 0 )
 369   3            {
 370   4              // turn off timer 0
 371   4              TR0 = 0;
 372   4            }
 373   3      
 374   3            // otherwise, the note is real... we must worry
 375   3            else
 376   3            {
 377   4              // set the frequency of the note by pushing to TH0
 378   4              // turn on the timer 0;
 379   4              TH0 = note_ptr[note_num];
 380   4              TL0 = TH0;
 381   4              TR0 = 1;
 382   4            }
 383   3      
 384   3            // ensure that since there are more notes, we are still timing their
 385   3            // durations
 386   3            TR1 = 1;
 387   3      
 388   3            // notice that the rest for the other note has not yet been played
 389   3            // so we must reset this variable
 390   3            rest_played = 0;
 391   3          }
 392   2        }
 393   1      }
 394          
 395          
 396          /*
 397            timer 0 interrupt service routine
 398            when introduction_flag == 0:
 399              ...
 400            when introduction_flag == 1:
 401          */
 402          void display ( ) interrupt TIMER_0
 403          {
 404   1      
 405   1        if (introduction_flag)
 406   1        {
 407   2           /*
 408   2           This function oscillates the speaker when the flag is raised
 409   2           the FREQUENCY_DIVISOR times. Since the flag is based on the timer
 410   2           which triggers based on what the current note is, we can vary the
 411   2           pitch by changing the timer amount. When we oscillate the speaker,
 412   2           we also reset note_its so it can start counting again.
 413   2          */
 414   2      
 415   2          // if triggered FREQUENCY_DIVISOR times
 416   2          if (note_its == note_ptr[note_num])
 417   2          {
 418   3            // oscillate speaker and reset count
 419   3            SPKR = ~SPKR;
 420   3            note_its = 0;
 421   3          }
 422   2      
 423   2          // otherwise, mark it and wait until reflagged
 424   2          else
 425   2          {
 426   3            note_its++;
 427   3          }
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 8   

 428   2        }
 429   1        else
 430   1        {
 431   2          TR0 = 0;
 432   2          if(gameStatus[0] == 'X')
 433   2          lTopLeft = 0;
 434   2        else if(gameStatus[0] == 'O')
 435   2          lTopLeft = ~lTopLeft;
 436   2        if(gameStatus[1] == 'X')
 437   2          lTopMid = 0;
 438   2        else if(gameStatus[1] == 'O')
 439   2          lTopMid = ~lTopMid;
 440   2        if(gameStatus[2] == 'X')
 441   2          lTopRight = 0;
 442   2        else if(gameStatus[2] == 'O')
 443   2          lTopRight = ~lTopRight;
 444   2        if(gameStatus[3] == 'X')
 445   2          lMidLeft = 0;
 446   2          else if(gameStatus[3] == 'O')
 447   2          lMidLeft = ~lMidLeft;
 448   2        if(gameStatus[4] == 'X')
 449   2          lMidMid = 0;
 450   2        else if(gameStatus[4] == 'O')
 451   2          lMidMid = ~lMidMid;
 452   2        if(gameStatus[5] == 'X')
 453   2          lMidRight = 0;
 454   2        else if(gameStatus[5] == 'O')
 455   2          lMidRight = ~lMidRight;
 456   2        if(gameStatus[6] == 'X')
 457   2          lBotLeft = 0;
 458   2        else if(gameStatus[6] == 'O')
 459   2          lBotLeft = ~lBotLeft;
 460   2        if(gameStatus[7] == 'X')
 461   2          lBotMid = 0;
 462   2        else if(gameStatus[7] == 'O')
 463   2          lBotMid = ~lBotMid;
 464   2        if(gameStatus[8] == 'X')
 465   2          lBotRight = 0;
 466   2        else if(gameStatus[8] == 'O')
 467   2          lBotRight = ~lBotRight;
 468   2        TH0= LED_FLASH_TIME_HIGH;
 469   2        TL0 = LED_FLASH_TIME_LOW;
 470   2        TR0 = 1;
 471   2        }
 472   1        return;
 473   1      }
 474          
 475          
 476          
 477          
 478          // -----------------------------------------------------------------------------
 479          // Function Definitions
 480          // -----------------------------------------------------------------------------
 481          
 482          
 483          void shortDelay()
 484          {
 485   1        for (pulse_counter = 0; pulse_counter < 255; pulse_counter++);
 486   1      }
 487          
 488          void play_sound_byte ( )
 489          {
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 9   

 490   1        // set the music to be the NBC clip
 491   1        //note_ptr =     nbc_notes;
 492   1        //duration_ptr = nbc_durations;
 493   1      
 494   1        // ------------------------------------------------------
 495   1        // set up the timers
 496   1        // ------------------------------------------------------
 497   1      
 498   1        // Timer 0 ==> 8-bit auto-reload
 499   1        // Timer 1 ==> 16-bit mode
 500   1        TMOD = 0x12;
 501   1      
 502   1        // Enable Timer 0, Timer 1 interrupts
 503   1        // Disable Serial interrupts
 504   1        IEN0 |= 0x8A;
 505   1      
 506   1        // Prioritize Timer 1 over Timer 0
 507   1        IP0 = 0x08;
 508   1      
 509   1        // Timer 0 will raise a flag based on the note frequency
 510   1        TH0 = FREQUENCY_DIVISOR;
 511   1        TL0 = FREQUENCY_DIVISOR;
 512   1      
 513   1        // Timer 1 will raise a flag every time the duration of a 32nd note is played
 514   1        TH1 = DURATION_32_NOTE >> 8;
 515   1        TL1 = DURATION_32_NOTE;
 516   1      
 517   1        mod = 1;
 518   1        rest_played = 0;
 519   1      
 520   1        duration = 0;  // set for 8 32nd notes
 521   1        note_its = 0;  // reset of count of iterations (to 111)
 522   1      
 523   1      
 524   1        TF1 = 1; // start timer 1
 525   1      
 526   1        /*if (note_ptr != 1)
 527   1        {
 528   1          TR0 = 1;
 529   1        }*/
 530   1      
 531   1        SPKR = 0;
 532   1        while(introduction_flag);
 533   1      }
 534          
 535          
 536          
 537          
 538          
 539          
 540          
 541          
 542          void restart_timer1 ( )
 543          {
 544   1        TH1 = DURATION_32_NOTE >> 8;
 545   1        TL1 = DURATION_32_NOTE;
 546   1        TR1 = 1;
 547   1      }
 548          
 549          
 550          
 551          
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 10  

 552          
 553          // ------------------------------------
 554          // print Game Status
 555          // ------------------------------------
 556          void printGameStatus ( )
 557          {
 558   1      
 559   1        for (row = 0; row < 3; row++)
 560   1        {   
 561   2          for (col = 0; col < 3; col++)
 562   2          {
 563   3            game_output[col * 2] = gameStatus[3 * row + col];
 564   3          }
 565   2          SerialDisplay(game_output);
 566   2          
 567   2          if (row != 2)
 568   2            SerialDisplay(line);
 569   2        }
 570   1      
 571   1        uart_transmit('\n');
 572   1      }
 573          
 574          char ai_input ( )
 575          {
 576   1        for (iterator = 0; iterator < 9; iterator++)
 577   1        {
 578   2          if (gameStatus[iterator] == ' ')
 579   2          {
 580   3            return (char) iterator + 1;
 581   3          }
 582   2        }
 583   1        return 0;
 584   1      }
 585          
 586          
 587          
 588          
 589          
 590          void StartGame(){
 591   1        char i;
 592   1        gameEnd = 0;
 593   1        
 594   1        for(i = 0; i < 9; i++)
 595   1        {
 596   2          gameStatus[i] = ' ';
 597   2        }
 598   1      
 599   1        //Reset lights
 600   1        lTopLeft = 1;
 601   1        lTopMid = 1;
 602   1        lTopRight = 1;
 603   1        lMidLeft = 1;
 604   1        lMidMid = 1;
 605   1        lMidRight = 1;
 606   1        lBotLeft = 1;
 607   1        lBotMid = 1;
 608   1        lBotRight = 1;
 609   1      
 610   1        //Initialize timer 0 for LED calculations
 611   1        TMOD = 0x01;
 612   1        TH0 = LED_FLASH_TIME_HIGH;
 613   1        TL0 = LED_FLASH_TIME_LOW;
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 11  

 614   1        IEN0 |= 0x82;
 615   1        TR0 = 1;
 616   1      
 617   1        //Player 1 should always go first
 618   1        current_player = 'X';
 619   1      
 620   1        return;
 621   1      }
 622          
 623          char PollButtons ( )
 624          {
 625   1        //Loop through and check each button
 626   1        if(!bTopLeft)
 627   1          return 1;
 628   1        if(!bTopMid)
 629   1          return 2;
 630   1        if(!bTopRight)
 631   1          return 3;
 632   1        if(!bMidLeft)
 633   1          return 4;
 634   1        if(!bMidMid)
 635   1          return 5;
 636   1        if(!bMidRight)
 637   1          return 6;
 638   1        if(!bBotLeft)
 639   1          return 7;
 640   1        if(!bBotMid)
 641   1          return 8;
 642   1        if(!bBotRight)
 643   1          return 9;
 644   1      
 645   1        return 0;
 646   1      }
 647          
 648          bit CheckWin ( )
 649          {
 650   1        //Check winning by rows
 651   1        int i = 0;
 652   1        bit tie = 1;
 653   1        for(i = 0; i < 3; i++)
 654   1        {
 655   2          if(gameStatus[3 * i] == gameStatus[(3*i) + 1] &&
 656   2           gameStatus[3 * i] == gameStatus[(3*i) + 2] &&
 657   2           gameStatus[3 * i] != ' ')
 658   2           
 659   2           return 1;
 660   2        }
 661   1      
 662   1        //Check winning by columns
 663   1        for(i = 0; i < 3; i++)
 664   1        {
 665   2          if(gameStatus[i] == gameStatus[i + 3] &&
 666   2           gameStatus[i] == gameStatus[i + 6] &&
 667   2           gameStatus[i] != ' ')
 668   2           
 669   2           return 1;
 670   2        }
 671   1      
 672   1        //Check diagonals
 673   1        if(gameStatus[0] == gameStatus[4] &&
 674   1           gameStatus[0] == gameStatus[8] &&
 675   1         gameStatus[0] != ' ')
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 12  

 676   1         
 677   1         return 1;
 678   1      
 679   1        if(gameStatus[2] == gameStatus[4] &&
 680   1           gameStatus[2] == gameStatus[6] &&
 681   1         gameStatus[2] != ' ')
 682   1      
 683   1         return 1;
 684   1      
 685   1        //Check for tie
 686   1        for(i = 0; i < 9; i++)
 687   1        {
 688   2          if(gameStatus[i] == ' ')
 689   2      	{
 690   3            tie = 0;
 691   3      	}
 692   2        }
 693   1        if(tie == 1)
 694   1        {
 695   2          return 1;
 696   2        }
 697   1      
 698   1      
 699   1         return 0;
 700   1      }
 701          
 702          void SerialDisplay(char s_msg[])
 703          {
 704   1        msg_i = 0;
 705   1        while (s_msg[msg_i] != '\0')
 706   1        {
 707   2          uart_transmit(s_msg[msg_i]);
 708   2          msg_i++;
 709   2        }
 710   1      
 711   1        for(iterator = 0; iterator < 10000; iterator++);
 712   1        return;
 713   1      }
 714          
 715          
 716          
 717          
 718          
 719          // -----------------------------------------------------------------------------
 720          // Main function body
 721          // -----------------------------------------------------------------------------
 722          
 723          void main ( )
 724          { 
 725   1        P2M1 = 0x00;
 726   1        P1M1 = 0x00;
 727   1        P0M1 = 0x00;
 728   1        
 729   1        p1_pulse = 0;
 730   1        p2_pulse = 0;
 731   1      
 732   1        gameStatus[9] = 0; //null terminating char array
 733   1        
 734   1        introduction_flag = 1;
 735   1        note_ptr =     maxine_buzzer1;
 736   1        duration_ptr = 0;
 737   1        num_notes = 32;
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 13  

 738   1        
 739   1        play_sound_byte();
 740   1        
 741   1        uart_init(); //Initializes serial transmission
 742   1        SerialDisplay(welcome_msg);  //Just for testings
 743   1        
 744   1        //char input = 0; 
 745   1        EA = 1;  //Enalbes interrupts
 746   1      
 747   1        //Setup I/O ports
 748   1        //TODO - Using bidirectional for now, does serial need something else?
 749   1      
 750   1        
 751   1        //Loop forever until power off
 752   1        while(1)
 753   1        {
 754   2      
 755   2          // if the top-left button is pressed before
 756   2          // a game starts, then the player is activating
 757   2          // human vs. computer mode, otherwise, it is
 758   2          // human vs. human mode
 759   2          AI_flag = 0;
 760   2          if ( !bTopLeft )
 761   2          {
 762   3              AI_flag = 1;
 763   3          }
 764   2      
 765   2          while ( bTopLeft == 0 );   
 766   2          
 767   2          StartGame();
 768   2      
 769   2      
 770   2        //Game loop - run until victory
 771   2        while(!gameEnd)
 772   2          {
 773   3      
 774   3            //Check for input
 775   3          do
 776   3          {
 777   4              if ( AI_flag && current_player == 'O' )
 778   4              {
 779   5                input = ai_input();
 780   5              }
 781   4              else
 782   4              {
 783   5                input = PollButtons();
 784   5              }
 785   4          }
 786   3            while(input == 0 || gameStatus[input - 1] != ' ');
 787   3            
 788   3            //Record new game input
 789   3            gameStatus[input - 1] = current_player;
 790   3      
 791   3            printGameStatus();
 792   3      
 793   3            //Check for win condition
 794   3            if(CheckWin())
 795   3          {
 796   4            //Victory
 797   4              gameEnd = 1;
 798   4              //This is for Jonathan's individual part.
 799   4              if (current_player == 'X')
C51 COMPILER V6.02  MAIN                                                                   05/09/2017 14:57:02 PAGE 14  

 800   4              {
 801   5                  p1_pulse = 1;
 802   5                  shortDelay();
 803   5                  p1_pulse = 0;
 804   5              }
 805   4              else
 806   4              {  
 807   5                  p2_pulse = 1;
 808   5                  shortDelay();
 809   5                  p2_pulse = 0;
 810   5              }
 811   4                
 812   4            }
 813   3      
 814   3            // switches players
 815   3          if (current_player == 'X')
 816   3            {
 817   4              current_player = 'O';
 818   4            }
 819   3            else
 820   3            {
 821   4              current_player = 'X';
 822   4            }
 823   3          //Wait for buttons to release
 824   3          while(PollButtons() != 0);
 825   3          }
 826   2          // Game is now over!! Play NBC
 827   2          introduction_flag = 1;
 828   2          play_sound_byte();
 829   2          
 830   2        }
 831   1      }
 832          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1031    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     89       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
